"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9989],{79989:function(t,r,a){a.d(r,{e:function(){return b},f:function(){return T}});var e=a(92598),c=a(73760),n=a(16810),i=a(85982),s=a(51698),o=a(85089),p=a(33154),l=a(69433),h=a(22130),m=a(95836),u=a(61327),d=a(82075);class W{featureName=i.cF.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}to=(0,p.c)(async t=>{let r=new n.C(this.contractWrapper),a=await Promise.all(t.map(t=>Promise.all([(0,i.aO)(t.toAddress),this.erc20.normalizeAmount(t.amount)]))),e=a.map(t=>{let[a,e]=t;return r.encode("mintTo",[a,e])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[e]})})}class g{featureName=i.cG.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}tokens=(0,p.c)(async t=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]}));from=(0,p.c)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([(0,i.aO)(t),this.erc20.normalizeAmount(r)])}))}class y{featureName=i.cH.name;constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a;let e=new o.C(this.contractWrapper,i.bj,this.storage);this.conditions=new l.D(this.contractWrapper,e,this.storage)}to=(0,p.c)(async(t,r,a)=>{let e=await this.erc20.normalizeAmount(r);return await this.conditions.getClaimTransaction(t,e,a)})}class w{constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a,this.claim=new y(this.erc20,this.contractWrapper,this.storage)}}class f{featureName=i.cI.name;constructor(t,r){this.erc20=t,this.contractWrapper=r,this.batch=this.detectErc20BatchMintable()}to=(0,p.c)(async(t,r)=>await this.getMintTransaction(t,r));async getMintTransaction(t,r){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([(0,i.aO)(t),this.erc20.normalizeAmount(r)])})}detectErc20BatchMintable(){if((0,o.d)(this.contractWrapper,"ERC20BatchMintable"))return new W(this.erc20,this.contractWrapper)}}class b{featureName=i.cJ.name;constructor(t,r){this.contractWrapper=t,this.roles=r}mint=(0,p.c)(async t=>{let r=t.payload,a=t.signature,[c,n]=await Promise.all([this.mapPayloadToContractStruct(r),this.contractWrapper.getCallOverrides()]);return await (0,u.s)(this.contractWrapper,e.O$.from(c.price),r.currencyAddress,n),p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[c,a],overrides:n})});mintBatch=(0,p.c)(async t=>{let r=await Promise.all(t.map(t=>this.mapPayloadToContractStruct(t.payload))),a=t.map((t,a)=>{let c=r[a],n=t.signature,i=t.payload.price;if(e.O$.from(i).gt(0))throw Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:c,signature:n}}),c=new n.C(this.contractWrapper),i=a.map(t=>c.encode("mintWithSignature",[t.message,t.signature]));return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[i]})});async verify(t){let r=t.payload,a=t.signature,e=await this.mapPayloadToContractStruct(r),c=await this.contractWrapper.read("verify",[e,a]);return c[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles?.verify(["minter"],await this.contractWrapper.getSignerAddress());let[r,a,e]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map(t=>d.S.parseAsync(t)))]),c=this.contractWrapper.getSigner();(0,h.Z)(c,"No signer available");let n=await Promise.all(e.map(t=>d.k.parseAsync(t))),i=await Promise.all(n.map(t=>this.mapPayloadToContractStruct(t))),s=await Promise.all(i.map(t=>this.contractWrapper.signTypedData(c,{name:a,version:"1",chainId:r,verifyingContract:this.contractWrapper.address},{MintRequest:d.M},t)));return e.map((t,r)=>{let a=n[r],e=s[r];return{payload:a,signature:e.toString()}})}async mapPayloadToContractStruct(t){let[r,a]=await Promise.all([(0,m.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),e=c.parseUnits(t.quantity,a);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:e,price:r,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}}async function C(t,r){let a=await t.read("decimals",[]);return c.parseUnits(i.cy.parse(r),a)}class T{featureName=i.cK.name;get chainId(){return this._chainId}constructor(t,r,a){this.contractWrapper=t,this.storage=r,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=a}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await (0,n.f)(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await (0,i.aO)(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){let[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),(0,i.aO)(t)]);return await this.allowanceOf(r,a)}async allowanceOf(t,r){let a=await Promise.all([(0,i.aO)(t),(0,i.aO)(r)]);return await this.getValue(await this.contractWrapper.read("allowance",a))}transfer=(0,p.c)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([(0,i.aO)(t),this.normalizeAmount(r)])}));transferFrom=(0,p.c)(async(t,r,a)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([(0,i.aO)(t),(0,i.aO)(r),this.normalizeAmount(a)])}));setAllowance=(0,p.c)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([(0,i.aO)(t),this.normalizeAmount(r)])}));transferBatch=(0,p.c)(async t=>{let r=new n.C(this.contractWrapper),a=(await Promise.all(t.map(t=>Promise.all([this.normalizeAmount(t.amount),(0,i.aO)(t.toAddress)])))).map(t=>{let[a,e]=t;return r.encode("transfer",[e,a])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})});mint=(0,p.c)(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=(0,p.c)(async(t,r)=>(0,s.a)(this.mintable,i.cI).to.prepare(t,r));async getMintTransaction(t,r){return(0,s.a)(this.mintable,i.cI).getMintTransaction(t,r)}mintBatchTo=(0,p.c)(async t=>(0,s.a)(this.mintable?.batch,i.cF).to.prepare(t));burn=(0,p.c)(async t=>(0,s.a)(this.burnable,i.cG).tokens.prepare(t));burnFrom=(0,p.c)(async(t,r)=>(0,s.a)(this.burnable,i.cG).from.prepare(t,r));claim=(0,p.c)(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r));claimTo=(0,p.c)(async(t,r,a)=>(0,s.a)(this.droppable?.claim,i.cH).to.prepare(t,r,a));get claimConditions(){return(0,s.a)(this.droppable?.claim,i.cH).conditions}get signature(){return(0,s.a)(this.signatureMintable,i.cJ)}async normalizeAmount(t){return C(this.contractWrapper,t)}async getValue(t){return await (0,n.a)(this.contractWrapper.getProvider(),this.getAddress(),e.O$.from(t))}detectErc20Mintable(){if((0,o.d)(this.contractWrapper,"ERC20"))return new f(this,this.contractWrapper)}detectErc20Burnable(){if((0,o.d)(this.contractWrapper,"ERC20Burnable"))return new g(this,this.contractWrapper)}detectErc20Droppable(){if((0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV2")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV2"))return new w(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if((0,o.d)(this.contractWrapper,"ERC20SignatureMintable"))return new b(this.contractWrapper)}}}}]);